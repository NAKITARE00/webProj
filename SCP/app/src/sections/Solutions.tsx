"use client";
import React, { useState } from "react";
import Image from "next/image";
import { sendEmail } from "@/lib/resend";

// Types
interface Solution {
    name: string;
    icon: string;
    description: string;
}

interface FormData {
    name: string;
    company: string;
    email: string;
}

interface FormErrors {
    name: string;
}

// Constants
const SOLUTIONS: Solution[] = [
    {
        name: "VisionAI",
        icon: "/assets/images/vision.png",
        description:
            "An AI application capable of training a new model to recognize a specific product.",
    },
    {
        name: "ChatAI",
        icon: "/assets/images/chat.png",
        description:
            "An AI chatbot that responds exclusively to queries based on a provided custom dataset.",
    },
    {
        name: "ReportAI",
        icon: "/assets/images/report.png",
        description:
            "An AI-powered app that connects to MySQL database and generates Excel reports via natural language input.",
    },
    {
        name: "CodeCanvas AI",
        icon: "/assets/images/code.png",
        description:
            "An AI-powered application that transforms images into front-end code, including HTML,CSS, and JavaScript.",
    },
    {
        name: "Detective AI",
        icon: "/assets/images/detective.png",
        description:
            "An application that identifies whether a piece of text was generated by an AI tool or written by a human.",
    },
];

// Validation
const validateName = (name: string): string => {
    if (!/^[a-zA-Z\- ]{2,}$/.test(name)) {
        return "Name must be at least 2 letters (hyphens/spaces allowed)";
    }
    return "";
};

export default function Solutions() {
    // State
    const [forms, setForms] = useState<FormData[]>(
        Array(SOLUTIONS.length).fill({ name: "", company: "", email: "" }),
    );
    const [errors, setErrors] = useState<FormErrors[]>(
        Array(SOLUTIONS.length).fill({ name: "" }),
    );
    const [loadingIndex, setLoadingIndex] = useState<number | null>(null);
    const [notification, setNotification] = useState({
        visible: false,
        success: false,
        message: "",
    });

    // Handlers
    const handleInputChange = (
        idx: number,
        field: keyof FormData,
        value: string,
    ) => {
        setForms((prev) => {
            const updated = [...prev];
            updated[idx] = { ...updated[idx], [field]: value };
            return updated;
        });

        // Clear error when typing
        if (errors[idx].name && field === "name") {
            setErrors((prev) => {
                const updated = [...prev];
                updated[idx] = { name: "" };
                return updated;
            });
        }
    };

    const validateForm = (idx: number): boolean => {
        const nameError = validateName(forms[idx].name);
        setErrors((prev) => {
            const updated = [...prev];
            updated[idx] = { name: nameError };
            return updated;
        });
        return !nameError;
    };

    const handleSubmit = async (idx: number, e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm(idx)) return;

        setLoadingIndex(idx);

        try {
            await sendEmail({
                to: "contact@spcltd.net",
                from: "onboarding@resend.dev",
                subject: `Demo Request: ${SOLUTIONS[idx].name} from ${forms[idx].name} ${forms[idx].company}`,
                html: `
          <h1>New Demo Request</h1>
          <p><strong>Solution:</strong> ${SOLUTIONS[idx].name}</p>
          <p><strong>Name:</strong> ${forms[idx].name}</p>
          <p><strong>Company:</strong> ${forms[idx].company}</p>
          <p><strong>Email:</strong> ${forms[idx].email}</p>
        `,
            });

            showNotification(
                true,
                `Demo request for ${SOLUTIONS[idx].name} submitted!`,
            );
            resetForm(idx);
        } catch (error) {
            const errorMessage =
                error instanceof Error
                    ? error.message
                    : "Failed to submit request. Please try again.";
            showNotification(false, errorMessage);
        } finally {
            setLoadingIndex(null);
        }
    };

    // Helpers
    const showNotification = (success: boolean, message: string) => {
        setNotification({ visible: true, success, message });
        setTimeout(
            () => setNotification((prev) => ({ ...prev, visible: false })),
            5000,
        );
    };

    const resetForm = (idx: number) => {
        setForms((prev) => {
            const updated = [...prev];
            updated[idx] = { name: "", company: "", email: "" };
            return updated;
        });
    };

    return (
        <section className="py-16 bg-gray-50" id="solutions">
            {/* Notification */}
            {notification.visible && (
                <div
                    className={`fixed top-4 right-4 p-4 rounded-md shadow-lg z-50 ${
                        notification.success
                            ? "bg-green-100 text-green-800"
                            : "bg-red-100 text-red-800"
                    }`}
                >
                    {notification.message}
                </div>
            )}

            <div className="container mx-auto px-4">
                {/* Marquee Animation (unchanged) */}

                <h2 className="text-3xl text-black font-medium mb-10 text-center">
                    Our Solutions
                </h2>

                <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
                    {SOLUTIONS.map((solution, idx) => (
                        <form
                            key={solution.name}
                            onSubmit={(e) => handleSubmit(idx, e)}
                            className="bg-white shadow-md rounded-lg p-8 flex flex-col items-center gap-4"
                        >
                            <Image
                                src={solution.icon}
                                alt={solution.name}
                                width={48}
                                height={48}
                                className="mb-2"
                            />

                            <h3 className="text-xl text-black font-semibold text-center">
                                {solution.name}
                            </h3>

                            <p className="text-gray-600 text-center mb-4">
                                {solution.description}
                            </p>

                            <div className="w-full">
                                <input
                                    type="text"
                                    placeholder="Name"
                                    value={forms[idx].name}
                                    onChange={(e) =>
                                        handleInputChange(
                                            idx,
                                            "name",
                                            e.target.value,
                                        )
                                    }
                                    className={`border ${
                                        errors[idx].name
                                            ? "border-red-500"
                                            : "border-gray-300"
                                    } rounded px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 text-black`}
                                    required
                                    disabled={loadingIndex === idx}
                                />
                                {errors[idx].name && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {errors[idx].name}
                                    </p>
                                )}
                            </div>

                            <input
                                type="text"
                                placeholder="Company"
                                value={forms[idx].company}
                                onChange={(e) =>
                                    handleInputChange(
                                        idx,
                                        "company",
                                        e.target.value,
                                    )
                                }
                                className="border border-gray-300 rounded px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
                                required
                                disabled={loadingIndex === idx}
                            />

                            <input
                                type="email"
                                placeholder="Business Email"
                                value={forms[idx].email}
                                onChange={(e) =>
                                    handleInputChange(
                                        idx,
                                        "email",
                                        e.target.value,
                                    )
                                }
                                className="border border-gray-300 rounded px-4 py-2 w-full focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
                                required
                                disabled={loadingIndex === idx}
                            />

                            <button
                                type="submit"
                                disabled={loadingIndex === idx}
                                className={`border bg-lime-400 text-neutral-950 rounded-full px-6 py-2 mt-2 w-full transition ${
                                    loadingIndex === idx
                                        ? "opacity-50 cursor-not-allowed"
                                        : "hover:bg-gray-800 hover:text-lime-400"
                                }`}
                            >
                                {loadingIndex === idx
                                    ? "Sending..."
                                    : "Get Demo"}
                            </button>
                        </form>
                    ))}
                </div>
            </div>
        </section>
    );
}
